AWSTemplateFormatVersion: '20100909'
 Description: Mamdouh Hazem's Event-Driven Order System Cloud Assignme
 Resources:
  OrdersTable:
    Type: AWSDynamoDBTable
    Properties:
      TableName: Orders-mhz
      AttributeDefinitions:
 -AttributeName: orderId
          AttributeType: S
      KeySchema:
 -AttributeName: orderId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
   OrderTopic:
Type: AWSSNSTopic
    Properties:
      TopicName: OrderTopic-mhz
  OrderQueueDLQ
    Type: AWSSQSQueue
    Properties:
      QueueName: OrderQueueDLQ-mhz
  OrderQueue:
    Type: AWSSQSQueue
    Properties:
      QueueName: OrderQueue-mhz
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt OrderQueueDLQ.Arn
        maxReceiveCount: 3
  OrderQueueSubscription:
    Type: AWSSNSSubscription
    Properties:
      TopicArn: !Ref OrderTopic
      Protocol: sqs
      Endpoint: !GetAtt OrderQueue.Arn
      RawMessageDelivery: false
  OrderQueuePolicy:
    Type: AWSSQSQueuePolicy
    Properties:
      Queues:
 -!Ref OrderQueue
      PolicyDocument:
        Version: "20121017"
        Statement:
 -Effect: Allow
            Principal: "*"
            Action: "SQS-SendMessage"
            Resource: !GetAtt OrderQueue.Arn
            Condition:
             ArnEquals:
                aws:SourceArn: !Ref OrderTopic
  ProcessOrderLambdaRole:
    Type: AWSIAMRole
    Properties:
      AssumeRolePolicyDocument:
        Version: "20121017"
        Statement:
 - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  ProcessOrderLambda:
    Type: AWSLambda::Function
    Properties:
      FunctionName: ProcessOrderLambda-mhz
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt ProcessOrderLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('Orders-mhz')
          def lambda_handler(event, context):
              for record in event['Records']:
                  message = json.loads(record['body'])
                  if 'Message' in message:
                      message = json.loads(message['Message'])
                        pr int(f"Processing order: {message['orderId']}")
                  t able.put_item(Item=message)
              return {
                  'statusCode' 200,
                  'body': json.dumps('Order processed successfully')
              }
  LambdaSQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt OrderQueue.Arn
      FunctionName: !Ref ProcessOrderLambda
      Enabled: true
      BatchSize: 1
 Outputs:
  OrdersTableName:
    Description: DynamoDB table name
    Value: !Ref OrdersTable
  OrderTopicArn:
    Description: SNS topic ARN
    Value: !Ref OrderTopic
  OrderQueueURL:
    Description: SQS Queue URL
    Value: !Ref OrderQueue
  OrderQueueDLQURL
    Description: SQS Dead Letter Queue URL
    Value: !Ref OrderQueueDLQ
  LambdaFunctionName:
    Description: Lambda function name
    Value: !Ref ProcessOrderLambda